
# --- Core Configurations ---
# core_location: Path to the core directory. It's where essential files are stored.
# auto_update: Enables automatic updates for the core components.
#     Note: Disabling this might cause compatibility issues with future versions.
[core]
    core_location = ".helix"
    auto_update = true


# --- Transpiler Configurations ---
# Detailed settings for the code transpiler.
# target: Specifies the target language for transpilation. Options: 'py', 'c++', etc.
# warnings: Toggles the display of warnings during transpilation.
# verbose: Enables verbose output for detailed logs.
# threads: Defines the number of threads to use for transpilation.
# optimization: Sets the level of optimization. Ranges from 0 (none) to 3 (maximum).
# regex_module: Chooses the regex module to be used. Options: 're', 're2'.
[transpiler]
    target = "py"
    warnings = true
    verbose = false
    threads = 50
    optimization = 3
    regex_module = "re"


# --- Compiler Configurations ---
# Configurations for various compilers used in the project.
# py: Python layer options: 'py' (default), 'bin', 'vile'.
#     'py' is typical for development and testing.
#     'bin' compiles to a binary executable for production.
#     'vile' generates an ABI for use with other languages and as a Helix library.
# c, cpp, rust: Specify the compilers for C, C++, and Rust respectively.
#     Defaults: 'gcc' for C, 'g++' for C++, 'rustc' for Rust.
# flags_py, flags_cpp, flags_c, flags_rust: Custom flags for compiling Python, C++, C, and Rust.
[compiler]
    py = "z:\\devolopment\\helix\\helix-lang\\.venv\\Scripts\\python.exe"
    c = "gcc"
    cpp = "g++"
    rust = "rustc"
    flags_py = "-OO"
    flags_cpp = "-std=c++17"
    flags_c = "-std=c18"
    flags_rust = "--edition=2021"


# --- Linker Configurations ---
# Settings for linking binaries and libraries.
# c_cpp_include_dirs: Include directories for C/C++ source files.
# rs_include_dirs: Include directories for Rust source files.
# py_include_dirs: Include directories for Python source files.
# lib_dirs: Directories where libraries are located.
[linker]
    c_cpp_include_dirs = []
    rs_include_dirs = []
    py_include_dirs = []
    lib_dirs = []
    link_static = false


# --- Formatter Configurations ---
# Configurations for code formatting.
# indent_size: The size of indentation in number of spaces.
# formatter: The tool used for formatting (e.g., 'black' for Python).
# always_format: When set to true, always formats the generated code.
#     Note: Enabling this might break certain code structures, recommended for debugging only.
[formatter]
    indent_size = 4
    formatter = "black"
    always_format = false

[environment]
    [env_vars]
